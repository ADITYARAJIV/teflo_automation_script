Provision_Example_with_python_script
====================================

This file contains all information of the files used in provisioning a ``5-Node cluster`` using a python script using Teflo.

**DESCRIPTION**
 
We have a *run.py* file which uses ``docopt module`` to take the files as input through the command line.
Also this file uses ``jinja2 template`` to get the values from the files taken as input and put these values in the resultant *scenario.yaml* file.
This file contains ``pyyaml module`` to dump the content in the resultant files.

Run
---

.. code-block:: bash 
    
    (teflo)$ python3 run.py --conf=<file1> --inventory=<file2>
Ex. (teflo)$ python3 run.py --conf=./conf.yaml --inventory=./inventory.yaml

To provision the nodes and volumes we need two files i.e., 
1. conf.yaml
2. inventory.yaml
 
conf.yaml
---

It contains the structure of the cluster i.e., number of nodes, number of volumes in each node, disk-size of each volume.
We have extracted these values from the conf.yaml file and stored in the scenario.yaml file.

inventory.yaml
---

It contains information of the server image and flavor which will be extracted and stored in the scenario.yaml file.

**TEMPLATE**

We have a teflo_template directory which contains the *template.yaml* file that contains the template or the blue-print of the actual scenario file where we'll have variables which will store the values extracted from the input files.
Ex. server: 
      image: {{image}}
      flavor: {{flavor}}

**OUTPUT**

We have an *output* directory which will have two files that are the resultant files used to provision the cluster.
1. scenario.yaml
2. vol_sceanrio.yaml

scenario.yaml
---

This file is generated by the pyhton script which will have the configuration to provision volumes and nodes.

vol_scenario.yaml
---

This file is generated by the python script which will have the configuration to attch the generated volumes to the respective nodes.

**NOTE**

The python script will first generate the scenario.yaml and vol_scenario.yaml files and then with the help of ``os module`` in python we'll internally execute our Teflo command which will do the actual provisioning work. The commands are as follows:

.. code-block:: none
 
	os.system("teflo run -t provision -s ./output/scenario.yaml")
	os.system("teflo run -t provision -s ./output/vol_scenario.yaml")

And the result log will be stored in the *./results.yaml* file

